{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"inset\", \"style\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useTheme } from '@react-navigation/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function Divider(props) {\n  var _useTheme = useTheme(),\n      dark = _useTheme.dark;\n\n  var inset = props.inset,\n      style = props.style,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var textStyle = dark ? styles.dark : styles.light;\n  return _jsx(View, _objectSpread(_objectSpread({}, rest), {}, {\n    style: [textStyle, inset && styles.inset, style]\n  }));\n}\nvar styles = StyleSheet.create({\n  light: {\n    backgroundColor: 'rgba(0, 0, 0, 0.12)',\n    height: StyleSheet.hairlineWidth\n  },\n  dark: {\n    backgroundColor: 'rgba(255, 255, 255, 0.12)',\n    height: StyleSheet.hairlineWidth\n  },\n  inset: {\n    marginLeft: 72\n  }\n});","map":{"version":3,"sources":["/Users/user/React-Native/sec 8 The Shop App/node_modules/react-navigation-header-buttons/src/overflowMenu/vendor/Divider.js"],"names":["React","useTheme","Divider","props","dark","inset","style","rest","textStyle","styles","light","StyleSheet","create","backgroundColor","height","hairlineWidth","marginLeft"],"mappings":";;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;;AAGA,SAASC,QAAT,QAAyB,0BAAzB;;AA2BA,OAAO,SAASC,OAAT,CAAiBC,KAAjB,EAA2D;AAChE,kBAAiBF,QAAQ,EAAzB;AAAA,MAAQG,IAAR,aAAQA,IAAR;;AACA,MAAQC,KAAR,GAAkCF,KAAlC,CAAQE,KAAR;AAAA,MAAeC,KAAf,GAAkCH,KAAlC,CAAeG,KAAf;AAAA,MAAyBC,IAAzB,4BAAkCJ,KAAlC;;AACA,MAAMK,SAAS,GAAGJ,IAAI,GAAGK,MAAM,CAACL,IAAV,GAAiBK,MAAM,CAACC,KAA9C;AACA,SAAO,KAAC,IAAD,kCAAUH,IAAV;AAAgB,IAAA,KAAK,EAAE,CAACC,SAAD,EAAYH,KAAK,IAAII,MAAM,CAACJ,KAA5B,EAAmCC,KAAnC;AAAvB,KAAP;AACD;AAED,IAAMG,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,KAAK,EAAE;AACLG,IAAAA,eAAe,EAAE,qBADZ;AAELC,IAAAA,MAAM,EAAEH,UAAU,CAACI;AAFd,GADwB;AAK/BX,EAAAA,IAAI,EAAE;AACJS,IAAAA,eAAe,EAAE,2BADb;AAEJC,IAAAA,MAAM,EAAEH,UAAU,CAACI;AAFf,GALyB;AAS/BV,EAAAA,KAAK,EAAE;AACLW,IAAAA,UAAU,EAAE;AADP;AATwB,CAAlB,CAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport type { ViewProps } from 'react-native/Libraries/Components/View/ViewPropTypes';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  ...ViewProps,\n  inset?: boolean,\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * ```\n */\nexport function Divider(props: Props): React.Element<typeof View> {\n  const { dark } = useTheme();\n  const { inset, style, ...rest } = props;\n  const textStyle = dark ? styles.dark : styles.light;\n  return <View {...rest} style={[textStyle, inset && styles.inset, style]} />;\n}\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: 'rgba(0, 0, 0, 0.12)',\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: 'rgba(255, 255, 255, 0.12)',\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}