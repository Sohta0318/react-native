{"ast":null,"code":"import React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CartItem from \"../../components/shop/CartItem\";\nimport Card from \"../../components/UI/Card\";\nimport Colors from \"../../constants/Colors\";\nimport * as cartActions from \"../../store/actions/cart\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar CartScreen = function CartScreen(props) {\n  var cartTotalAmount = useSelector(function (state) {\n    return state.cart.totalAmount;\n  });\n  var cartItems = useSelector(function (state) {\n    var transformedCartItems = [];\n\n    for (var key in state.cart.items) {\n      transformedCartItems.push({\n        productId: key,\n        productTitle: state.cart.items[key].productTitle,\n        productPrice: state.cart.items[key].productPrice,\n        quantity: state.cart.items[key].quantity,\n        sum: state.cart.items[key].sum\n      });\n    }\n\n    return transformedCartItems.sort(function (a, b) {\n      return a.productId > b.productId ? 1 : -1;\n    });\n  });\n  var dispatch = useDispatch();\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsxs(Card, {\n      style: styles.summary,\n      children: [_jsxs(Text, {\n        style: styles.summaryText,\n        children: [\"Total:\", \" \", _jsxs(Text, {\n          style: styles.amount,\n          children: [\"$\", Math.round(cartTotalAmount.toFixed(2) * 100) / 100]\n        })]\n      }), _jsx(Button, {\n        color: Colors.accent,\n        title: \"Order Now\",\n        disabled: cartItems.length === 0,\n        onPress: function onPress() {\n          dispatch(ordersActions.addOrder(cartItems, cartTotalAmount));\n        }\n      })]\n    }), _jsx(FlatList, {\n      data: cartItems,\n      keyExtractor: function keyExtractor(item) {\n        return item.productId;\n      },\n      renderItem: function renderItem(itemData) {\n        return _jsx(CartItem, {\n          quantity: itemData.item.quantity,\n          title: itemData.item.productTitle,\n          amount: itemData.item.sum,\n          deletable: true,\n          onRemove: function onRemove() {\n            dispatch(cartActions.removeFromCart(itemData.item.productId));\n          }\n        });\n      }\n    })]\n  });\n};\n\nCartScreen.navigationOptions = {\n  headerTitle: \"Your Cart\"\n};\nvar styles = StyleSheet.create({\n  screen: {\n    margin: 20\n  },\n  summary: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 20,\n    padding: 10\n  },\n  summaryText: {\n    fontFamily: \"open-sans-bold\",\n    fontSize: 18\n  },\n  amount: {\n    color: Colors.primary\n  }\n});\nexport default CartScreen;","map":{"version":3,"sources":["/Users/user/React-Native/sec 10 Http request & Adding web server + database/screens/shop/CartScreen.js"],"names":["React","useDispatch","useSelector","CartItem","Card","Colors","cartActions","ordersActions","CartScreen","props","cartTotalAmount","state","cart","totalAmount","cartItems","transformedCartItems","key","items","push","productId","productTitle","productPrice","quantity","sum","sort","a","b","dispatch","styles","screen","summary","summaryText","amount","Math","round","toFixed","accent","length","addOrder","item","itemData","removeFromCart","navigationOptions","headerTitle","StyleSheet","create","margin","flexDirection","alignItems","justifyContent","marginBottom","padding","fontFamily","fontSize","color","primary"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, Text, FlatList, StyleSheet, Button } from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport CartItem from \"../../components/shop/CartItem\";\nimport Card from \"../../components/UI/Card\";\nimport Colors from \"../../constants/Colors\";\nimport * as cartActions from \"../../store/actions/cart\";\nimport * as ordersActions from \"../../store/actions/orders\";\n\nconst CartScreen = (props) => {\n  const cartTotalAmount = useSelector((state) => state.cart.totalAmount);\n  const cartItems = useSelector((state) => {\n    const transformedCartItems = [];\n    for (const key in state.cart.items) {\n      transformedCartItems.push({\n        productId: key,\n        productTitle: state.cart.items[key].productTitle,\n        productPrice: state.cart.items[key].productPrice,\n        quantity: state.cart.items[key].quantity,\n        sum: state.cart.items[key].sum,\n      });\n    }\n    return transformedCartItems.sort((a, b) =>\n      a.productId > b.productId ? 1 : -1\n    );\n  });\n\n  const dispatch = useDispatch();\n  return (\n    <View style={styles.screen}>\n      <Card style={styles.summary}>\n        <Text style={styles.summaryText}>\n          Total:{\" \"}\n          <Text style={styles.amount}>\n            ${Math.round(cartTotalAmount.toFixed(2) * 100) / 100}\n          </Text>\n        </Text>\n        <Button\n          color={Colors.accent}\n          title=\"Order Now\"\n          disabled={cartItems.length === 0}\n          onPress={() => {\n            dispatch(ordersActions.addOrder(cartItems, cartTotalAmount));\n          }}\n        />\n      </Card>\n      <FlatList\n        data={cartItems}\n        keyExtractor={(item) => item.productId}\n        renderItem={(itemData) => (\n          <CartItem\n            quantity={itemData.item.quantity}\n            title={itemData.item.productTitle}\n            amount={itemData.item.sum}\n            deletable\n            onRemove={() => {\n              dispatch(cartActions.removeFromCart(itemData.item.productId));\n            }}\n          />\n        )}\n      />\n    </View>\n  );\n};\n\nCartScreen.navigationOptions = {\n  headerTitle: \"Your Cart\",\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    margin: 20,\n  },\n  summary: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    marginBottom: 20,\n    padding: 10,\n  },\n  summaryText: {\n    fontFamily: \"open-sans-bold\",\n    fontSize: 18,\n  },\n  amount: {\n    color: Colors.primary,\n  },\n});\n\nexport default CartScreen;\n"]},"metadata":{},"sourceType":"module"}