{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport var SIGNUP = \"SIGNUP\";\nexport var LOGIN = \"LOGIN\";\nexport var AUTHENTICATE = \"AUTHENTICATE\";\nexport var LOGOUT = \"LOGOUT\";\nvar timer;\nexport var authenticate = function authenticate(userId, token, expiryTime) {\n  return function (dispatch) {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({\n      type: AUTHENTICATE,\n      userId: userId,\n      token: token\n    });\n  };\n};\nexport var signup = function signup(email, password) {\n  return function _callee(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCYNvauFK_fZEDcNnYdE-4xulhGIos2wRs\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context.sent;\n\n            if (response.ok) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context.sent;\n            errorId = errorResData.error.message;\n            message = \"Something went wrong!\";\n\n            if (errorId === \"EMAIL_EXISTS\") {\n              message = \"This email exists already!\";\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    var response, errorResData, errorId, message, resData, expirationDate;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(fetch(\"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCYNvauFK_fZEDcNnYdE-4xulhGIos2wRs\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                email: email,\n                password: password,\n                returnSecureToken: true\n              })\n            }));\n\n          case 2:\n            response = _context2.sent;\n\n            if (response.ok) {\n              _context2.next = 11;\n              break;\n            }\n\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            errorResData = _context2.sent;\n            errorId = errorResData.error.message;\n            message = \"Something went wrong!\";\n\n            if (errorId === \"EMAIL_NOT_FOUND\") {\n              message = \"This email could not be found!\";\n            } else if (errorId === \"INVALID_PASSWORD\") {\n              message = \"This password is not valid!\";\n            }\n\n            throw new Error(message);\n\n          case 11:\n            _context2.next = 13;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 13:\n            resData = _context2.sent;\n            console.log(resData);\n            dispatch(authenticate(resData.localId, resData.idToken, parseInt(resData.expiresIn) * 1000));\n            expirationDate = new Date(new Date().getTime() + parseInt(resData.expiresIn) * 1000);\n            saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n\n          case 18:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var logout = function logout() {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n  return {\n    type: LOGOUT\n  };\n};\n\nvar clearLogoutTimer = function clearLogoutTimer() {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nvar setLogoutTimer = function setLogoutTimer(expirationTime) {\n  return function (dispatch) {\n    timer = setTimeout(function () {\n      dispatch(logout());\n    }, expirationTime / 1000);\n  };\n};\n\nvar saveDataToStorage = function saveDataToStorage(token, userId, expirationDate) {\n  AsyncStorage.setItem(\"userData\", JSON.stringify({\n    token: token,\n    userId: userId,\n    expiryDate: expirationDate.toISOString()\n  }));\n};","map":{"version":3,"sources":["/Users/user/React-Native/sec 11 Authentication/store/actions/auth.js"],"names":["AsyncStorage","SIGNUP","LOGIN","AUTHENTICATE","LOGOUT","timer","authenticate","userId","token","expiryTime","dispatch","setLogoutTimer","type","signup","email","password","fetch","method","headers","body","JSON","stringify","returnSecureToken","response","ok","json","errorResData","errorId","error","message","Error","resData","console","log","localId","idToken","parseInt","expiresIn","expirationDate","Date","getTime","saveDataToStorage","login","logout","clearLogoutTimer","removeItem","clearTimeout","expirationTime","setTimeout","setItem","expiryDate","toISOString"],"mappings":"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","sourcesContent":["import AsyncStorage from \"@react-native-async-storage/async-storage\";\nexport const SIGNUP = \"SIGNUP\";\nexport const LOGIN = \"LOGIN\";\nexport const AUTHENTICATE = \"AUTHENTICATE\";\nexport const LOGOUT = \"LOGOUT\";\n\nlet timer;\n\nexport const authenticate = (userId, token, expiryTime) => {\n  return (dispatch) => {\n    dispatch(setLogoutTimer(expiryTime));\n    dispatch({ type: AUTHENTICATE, userId, token });\n  };\n};\n\nexport const signup = (email, password) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCYNvauFK_fZEDcNnYdE-4xulhGIos2wRs\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email,\n          password,\n          returnSecureToken: true,\n        }),\n      }\n    );\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = \"Something went wrong!\";\n      if (errorId === \"EMAIL_EXISTS\") {\n        message = \"This email exists already!\";\n      }\n      throw new Error(message);\n    }\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\nexport const login = (email, password) => {\n  return async (dispatch) => {\n    const response = await fetch(\n      \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCYNvauFK_fZEDcNnYdE-4xulhGIos2wRs\",\n      {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          email,\n          password,\n          returnSecureToken: true,\n        }),\n      }\n    );\n    if (!response.ok) {\n      const errorResData = await response.json();\n      const errorId = errorResData.error.message;\n      let message = \"Something went wrong!\";\n      if (errorId === \"EMAIL_NOT_FOUND\") {\n        message = \"This email could not be found!\";\n      } else if (errorId === \"INVALID_PASSWORD\") {\n        message = \"This password is not valid!\";\n      }\n      throw new Error(message);\n    }\n    const resData = await response.json();\n    console.log(resData);\n    dispatch(\n      authenticate(\n        resData.localId,\n        resData.idToken,\n        parseInt(resData.expiresIn) * 1000\n      )\n    );\n    const expirationDate = new Date(\n      new Date().getTime() + parseInt(resData.expiresIn) * 1000\n    );\n    saveDataToStorage(resData.idToken, resData.localId, expirationDate);\n  };\n};\n\nexport const logout = () => {\n  clearLogoutTimer();\n  AsyncStorage.removeItem(\"userData\");\n\n  return { type: LOGOUT };\n};\n\nconst clearLogoutTimer = () => {\n  if (timer) {\n    clearTimeout(timer);\n  }\n};\n\nconst setLogoutTimer = (expirationTime) => {\n  return (dispatch) => {\n    timer = setTimeout(() => {\n      dispatch(logout());\n    }, expirationTime / 1000);\n  };\n};\n\nconst saveDataToStorage = (token, userId, expirationDate) => {\n  AsyncStorage.setItem(\n    \"userData\",\n    JSON.stringify({\n      token,\n      userId,\n      expiryDate: expirationDate.toISOString(),\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"module"}