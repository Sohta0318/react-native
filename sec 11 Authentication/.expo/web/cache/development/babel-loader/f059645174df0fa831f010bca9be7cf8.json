{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport ShopNavigator from \"./navigation/ShopNavigator\";\nimport cartReducer from \"./store/reducers/cart\";\nimport ordersReducer from \"./store/reducers/orders\";\nimport productsReducer from \"./store/reducers/products\";\nimport { useState } from \"react\";\nimport ReduxThunk from \"redux-thunk\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar rootReducer = combineReducers({\n  products: productsReducer,\n  cart: cartReducer,\n  orders: ordersReducer\n});\nvar store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontLoaded = _useState2[1];\n\n  if (!fontLoaded) {\n    return _jsx(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        setFontLoaded(true);\n      },\n      onError: function onError(error) {\n        console.log(error);\n      }\n    });\n  }\n\n  return _jsx(Provider, {\n    store: store,\n    children: _jsx(ShopNavigator, {})\n  });\n}","map":{"version":3,"sources":["/Users/user/React-Native/sec 10 Http request & Adding web server + database/App.js"],"names":["createStore","combineReducers","applyMiddleware","Provider","AppLoading","Font","ShopNavigator","cartReducer","ordersReducer","productsReducer","useState","ReduxThunk","rootReducer","products","cart","orders","store","fetchFonts","loadAsync","require","App","fontLoaded","setFontLoaded","error","console","log"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,UAAP,MAAuB,kBAAvB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAOC,aAAP;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,OAAOC,eAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,OAAOC,UAAP,MAAuB,aAAvB;;AAGA,IAAMC,WAAW,GAAGX,eAAe,CAAC;AAClCY,EAAAA,QAAQ,EAAEJ,eADwB;AAElCK,EAAAA,IAAI,EAAEP,WAF4B;AAGlCQ,EAAAA,MAAM,EAAEP;AAH0B,CAAD,CAAnC;AAMA,IAAMQ,KAAK,GAAGhB,WAAW,CAACY,WAAD,EAAcV,eAAe,CAACS,UAAD,CAA7B,CAAzB;;AAGA,IAAMM,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOZ,IAAI,CAACa,SAAL,CAAe;AACpB,iBAAaC,OAAO,uCADA;AAEpB,sBAAkBA,OAAO;AAFL,GAAf,CAAP;AAID,CALD;;AAOA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAoCV,QAAQ,CAAC,KAAD,CAA5C;AAAA;AAAA,MAAOW,UAAP;AAAA,MAAmBC,aAAnB;;AAEA,MAAI,CAACD,UAAL,EAAiB;AACf,WACE,KAAC,UAAD;AACE,MAAA,UAAU,EAAEJ,UADd;AAEE,MAAA,QAAQ,EAAE,oBAAM;AACdK,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD,OAJH;AAKE,MAAA,OAAO,EAAE,iBAACC,KAAD,EAAW;AAClBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AAPH,MADF;AAWD;;AACD,SACE,KAAC,QAAD;AAAU,IAAA,KAAK,EAAEP,KAAjB;AAAA,cACE,KAAC,aAAD;AADF,IADF;AAKD","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport AppLoading from \"expo-app-loading\";\nimport * as Font from \"expo-font\";\nimport ShopNavigator from \"./navigation/ShopNavigator\";\nimport cartReducer from \"./store/reducers/cart\";\nimport ordersReducer from \"./store/reducers/orders\";\nimport productsReducer from \"./store/reducers/products\";\nimport { useState } from \"react\";\nimport ReduxThunk from \"redux-thunk\";\n// import { composeWithDevTools } from \"redux-devtools-extension\";\n\nconst rootReducer = combineReducers({\n  products: productsReducer,\n  cart: cartReducer,\n  orders: ordersReducer,\n});\n\nconst store = createStore(rootReducer, applyMiddleware(ReduxThunk));\n// const store = createStore(rootReducer, composeWithDevTools());\n\nconst fetchFonts = () => {\n  return Font.loadAsync({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    \"open-sans-bold\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n  });\n};\n\nexport default function App() {\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  if (!fontLoaded) {\n    return (\n      <AppLoading\n        startAsync={fetchFonts}\n        onFinish={() => {\n          setFontLoaded(true);\n        }}\n        onError={(error) => {\n          console.log(error);\n        }}\n      />\n    );\n  }\n  return (\n    <Provider store={store}>\n      <ShopNavigator />\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}