{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\nimport HeaderButton from \"../../components/UI/HeaderButton\";\nimport ProductItem from \"../../components/shop/ProductItem\";\nimport * as cartActions from \"../../store/actions/cart\";\nimport * as productsActions from \"../../store/actions/products\";\nimport Colors from \"../../constants/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar ProductsOverviewScreen = function ProductsOverviewScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isRefreshing = _useState4[0],\n      setIsRefreshing = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      error = _useState6[0],\n      setError = _useState6[1];\n\n  var products = useSelector(function (state) {\n    return state.products.availableProducts;\n  });\n  var dispatch = useDispatch();\n  var loadProducts = useCallback(function _callee() {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setError(null);\n            setIsRefreshing(true);\n            _context.prev = 2;\n            _context.next = 5;\n            return _regeneratorRuntime.awrap(dispatch(productsActions.fetchProducts()));\n\n          case 5:\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](2);\n            setError(_context.t0.message);\n\n          case 10:\n            setIsRefreshing(false);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[2, 7]], Promise);\n  }, [dispatch, setIsLoading, setError]);\n  useEffect(function () {\n    var willFocusSub = props.navigation.addListener(\"willFocus\", loadProducts);\n    return function () {\n      willFocusSub.remove();\n    };\n  }, [loadProducts]);\n  useEffect(function () {\n    setIsLoading(true);\n    loadProducts().then(function () {\n      setIsLoading(false);\n    });\n  }, [dispatch, loadProducts]);\n\n  var selectItemHandler = function selectItemHandler(id, title) {\n    props.navigation.navigate(\"ProductDetail\", {\n      productId: id,\n      productTitle: title\n    });\n  };\n\n  if (error) {\n    return _jsxs(View, {\n      style: styles.centered,\n      children: [_jsx(Text, {\n        children: \"An error occurred!\"\n      }), _jsx(Button, {\n        title: \"Try again\",\n        onPress: loadProducts,\n        color: Colors.primary\n      })]\n    });\n  }\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: styles.centered,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: Colors.primary\n      })\n    });\n  }\n\n  if (!isLoading && products.length === 0) {\n    return _jsx(View, {\n      style: styles.centered,\n      children: _jsx(Text, {\n        children: \"No products found. Maybe start adding some!\"\n      })\n    });\n  }\n\n  return _jsx(FlatList, {\n    onRefresh: loadProducts,\n    refreshing: isRefreshing,\n    data: products,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    renderItem: function renderItem(itemData) {\n      return _jsxs(ProductItem, {\n        image: itemData.item.imageUrl,\n        title: itemData.item.title,\n        price: itemData.item.price,\n        onSelect: function onSelect() {\n          selectItemHandler(itemData.item.id, itemData.item.title);\n        },\n        children: [_jsx(Button, {\n          color: Colors.primary,\n          title: \"View Details\",\n          onPress: function onPress() {\n            selectItemHandler(itemData.item.id, itemData.item.title);\n          }\n        }), _jsx(Button, {\n          color: Colors.primary,\n          title: \"To Cart\",\n          onPress: function onPress() {\n            dispatch(cartActions.addToCart(itemData.item));\n          }\n        })]\n      });\n    }\n  });\n};\n\nProductsOverviewScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: \"All Products\",\n    headerLeft: function headerLeft() {\n      return _jsx(HeaderButtons, {\n        HeaderButtonComponent: HeaderButton,\n        children: _jsx(Item, {\n          title: \"Menu\",\n          iconName: Platform.OS === \"android\" ? \"md-menu\" : \"ios-menu\",\n          onPress: function onPress() {\n            navData.navigation.toggleDrawer();\n          }\n        })\n      });\n    },\n    headerRight: function headerRight() {\n      return _jsx(HeaderButtons, {\n        HeaderButtonComponent: HeaderButton,\n        children: _jsx(Item, {\n          title: \"Cart\",\n          iconName: Platform.OS === \"android\" ? \"md-cart\" : \"ios-cart\",\n          onPress: function onPress() {\n            navData.navigation.navigate(\"Cart\");\n          }\n        })\n      });\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nexport default ProductsOverviewScreen;","map":{"version":3,"sources":["/Users/user/React-Native/sec 11 Authentication/screens/shop/ProductsOverviewScreen.js"],"names":["React","useState","useEffect","useCallback","useSelector","useDispatch","HeaderButtons","Item","HeaderButton","ProductItem","cartActions","productsActions","Colors","ProductsOverviewScreen","props","isLoading","setIsLoading","isRefreshing","setIsRefreshing","error","setError","products","state","availableProducts","dispatch","loadProducts","fetchProducts","message","willFocusSub","navigation","addListener","remove","then","selectItemHandler","id","title","navigate","productId","productTitle","styles","centered","primary","length","item","itemData","imageUrl","price","addToCart","navigationOptions","navData","headerTitle","headerLeft","Platform","OS","toggleDrawer","headerRight","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  View,\n  Text,\n  FlatList,\n  Button,\n  Platform,\n  ActivityIndicator,\n  StyleSheet,\n} from \"react-native\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\n\nimport HeaderButton from \"../../components/UI/HeaderButton\";\nimport ProductItem from \"../../components/shop/ProductItem\";\nimport * as cartActions from \"../../store/actions/cart\";\nimport * as productsActions from \"../../store/actions/products\";\nimport Colors from \"../../constants/Colors\";\n\nconst ProductsOverviewScreen = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [error, setError] = useState();\n  const products = useSelector((state) => state.products.availableProducts);\n  const dispatch = useDispatch();\n\n  const loadProducts = useCallback(async () => {\n    setError(null);\n    setIsRefreshing(true);\n    try {\n      await dispatch(productsActions.fetchProducts());\n    } catch (err) {\n      setError(err.message);\n    }\n    setIsRefreshing(false);\n  }, [dispatch, setIsLoading, setError]);\n\n  useEffect(() => {\n    const willFocusSub = props.navigation.addListener(\n      \"willFocus\",\n      loadProducts\n    );\n\n    return () => {\n      willFocusSub.remove();\n    };\n  }, [loadProducts]);\n\n  useEffect(() => {\n    setIsLoading(true);\n    loadProducts().then(() => {\n      setIsLoading(false);\n    });\n  }, [dispatch, loadProducts]);\n\n  const selectItemHandler = (id, title) => {\n    props.navigation.navigate(\"ProductDetail\", {\n      productId: id,\n      productTitle: title,\n    });\n  };\n\n  if (error) {\n    return (\n      <View style={styles.centered}>\n        <Text>An error occurred!</Text>\n        <Button\n          title=\"Try again\"\n          onPress={loadProducts}\n          color={Colors.primary}\n        />\n      </View>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <View style={styles.centered}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n      </View>\n    );\n  }\n\n  if (!isLoading && products.length === 0) {\n    return (\n      <View style={styles.centered}>\n        <Text>No products found. Maybe start adding some!</Text>\n      </View>\n    );\n  }\n\n  return (\n    <FlatList\n      onRefresh={loadProducts}\n      refreshing={isRefreshing}\n      data={products}\n      keyExtractor={(item) => item.id}\n      renderItem={(itemData) => (\n        <ProductItem\n          image={itemData.item.imageUrl}\n          title={itemData.item.title}\n          price={itemData.item.price}\n          onSelect={() => {\n            selectItemHandler(itemData.item.id, itemData.item.title);\n          }}\n        >\n          <Button\n            color={Colors.primary}\n            title=\"View Details\"\n            onPress={() => {\n              selectItemHandler(itemData.item.id, itemData.item.title);\n            }}\n          />\n          <Button\n            color={Colors.primary}\n            title=\"To Cart\"\n            onPress={() => {\n              dispatch(cartActions.addToCart(itemData.item));\n            }}\n          />\n        </ProductItem>\n      )}\n    />\n  );\n};\n\nProductsOverviewScreen.navigationOptions = (navData) => {\n  return {\n    headerTitle: \"All Products\",\n    headerLeft: () => (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Menu\"\n          iconName={Platform.OS === \"android\" ? \"md-menu\" : \"ios-menu\"}\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n    ),\n    headerRight: () => (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Cart\"\n          iconName={Platform.OS === \"android\" ? \"md-cart\" : \"ios-cart\"}\n          onPress={() => {\n            navData.navigation.navigate(\"Cart\");\n          }}\n        />\n      </HeaderButtons>\n    ),\n  };\n};\n\nconst styles = StyleSheet.create({\n  centered: { flex: 1, justifyContent: \"center\", alignItems: \"center\" },\n});\n\nexport default ProductsOverviewScreen;\n"]},"metadata":{},"sourceType":"module"}