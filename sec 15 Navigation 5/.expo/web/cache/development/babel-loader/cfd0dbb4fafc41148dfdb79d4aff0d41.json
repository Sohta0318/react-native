{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useDispatch } from \"react-redux\";\nimport Colors from \"../constants/Colors\";\nimport * as authActions from \"../store/actions/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar StartupScreen = function StartupScreen(props) {\n  var dispatch = useDispatch();\n  useEffect(function () {\n    var tryLogin = function tryLogin() {\n      var userData, transformedData, token, userId, expiryDate, expirationDate, expirationTime;\n      return _regeneratorRuntime.async(function tryLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"userData\"));\n\n            case 2:\n              userData = _context.sent;\n\n              if (userData) {\n                _context.next = 6;\n                break;\n              }\n\n              props.navigation.navigate(\"Auth\");\n              return _context.abrupt(\"return\");\n\n            case 6:\n              transformedData = JSON.parse(userData);\n              token = transformedData.token, userId = transformedData.userId, expiryDate = transformedData.expiryDate;\n              expirationDate = new Date(expiryDate);\n\n              if (!(expirationDate <= new Date() || !token || !userId)) {\n                _context.next = 12;\n                break;\n              }\n\n              props.navigation.navigate(\"Auth\");\n              return _context.abrupt(\"return\");\n\n            case 12:\n              expirationTime = expirationDate.getTime() - new Date().getTime();\n              props.navigation.navigate(\"Shop\");\n              dispatch(authActions.authenticate(userId, token, expirationTime));\n\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    var expirationTime = function expirationTime(expirationDate) {};\n\n    tryLogin();\n  }, [dispatch]);\n  return _jsx(View, {\n    style: styles.screen,\n    children: _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: Colors.primary\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nexport default StartupScreen;","map":{"version":3,"sources":["/Users/user/React-Native/sec 11 Authentication/screens/StartupScreen.js"],"names":["React","useEffect","AsyncStorage","useDispatch","Colors","authActions","StartupScreen","props","dispatch","tryLogin","getItem","userData","navigation","navigate","transformedData","JSON","parse","token","userId","expiryDate","expirationDate","Date","expirationTime","getTime","authenticate","styles","screen","primary","StyleSheet","create","flex","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAEA,OAAOC,YAAP,MAAyB,2CAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,MAAP;AACA,OAAO,KAAKC,WAAZ;;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAW;AAC/B,MAAMC,QAAQ,GAAGL,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMQ,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACQP,YAAY,CAACQ,OAAb,CAAqB,UAArB,CADR;;AAAA;AACTC,cAAAA,QADS;;AAAA,kBAEVA,QAFU;AAAA;AAAA;AAAA;;AAGbJ,cAAAA,KAAK,CAACK,UAAN,CAAiBC,QAAjB,CAA0B,MAA1B;AAHa;;AAAA;AAMTC,cAAAA,eANS,GAMSC,IAAI,CAACC,KAAL,CAAWL,QAAX,CANT;AAOPM,cAAAA,KAPO,GAOuBH,eAPvB,CAOPG,KAPO,EAOAC,MAPA,GAOuBJ,eAPvB,CAOAI,MAPA,EAOQC,UAPR,GAOuBL,eAPvB,CAOQK,UAPR;AAQTC,cAAAA,cARS,GAQQ,IAAIC,IAAJ,CAASF,UAAT,CARR;;AAAA,oBAUXC,cAAc,IAAI,IAAIC,IAAJ,EAAlB,IAAgC,CAACJ,KAAjC,IAA0C,CAACC,MAVhC;AAAA;AAAA;AAAA;;AAWbX,cAAAA,KAAK,CAACK,UAAN,CAAiBC,QAAjB,CAA0B,MAA1B;AAXa;;AAAA;AAeTS,cAAAA,cAfS,GAeQF,cAAc,CAACG,OAAf,KAA2B,IAAIF,IAAJ,GAAWE,OAAX,EAfnC;AAiBfhB,cAAAA,KAAK,CAACK,UAAN,CAAiBC,QAAjB,CAA0B,MAA1B;AACAL,cAAAA,QAAQ,CAACH,WAAW,CAACmB,YAAZ,CAAyBN,MAAzB,EAAiCD,KAAjC,EAAwCK,cAAxC,CAAD,CAAR;;AAlBe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAqBA,QAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACF,cAAD,EAAoB,CAAE,CAA7C;;AAEAX,IAAAA,QAAQ;AACT,GAzBQ,EAyBN,CAACD,QAAD,CAzBM,CAAT;AA2BA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEiB,MAAM,CAACC,MAApB;AAAA,cACE,KAAC,iBAAD;AAAmB,MAAA,IAAI,EAAC,OAAxB;AAAgC,MAAA,KAAK,EAAEtB,MAAM,CAACuB;AAA9C;AADF,IADF;AAKD,CAnCD;;AAqCA,IAAMF,MAAM,GAAGG,UAAU,CAACC,MAAX,CAAkB;AAC/BH,EAAAA,MAAM,EAAE;AACNI,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,cAAc,EAAE,QAFV;AAGNC,IAAAA,UAAU,EAAE;AAHN;AADuB,CAAlB,CAAf;AAQA,eAAe1B,aAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { View, ActivityIndicator, StyleSheet } from \"react-native\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { useDispatch } from \"react-redux\";\n\nimport Colors from \"../constants/Colors\";\nimport * as authActions from \"../store/actions/auth\";\n\nconst StartupScreen = (props) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const tryLogin = async () => {\n      const userData = await AsyncStorage.getItem(\"userData\");\n      if (!userData) {\n        props.navigation.navigate(\"Auth\");\n        return;\n      }\n      const transformedData = JSON.parse(userData);\n      const { token, userId, expiryDate } = transformedData;\n      const expirationDate = new Date(expiryDate);\n\n      if (expirationDate <= new Date() || !token || !userId) {\n        props.navigation.navigate(\"Auth\");\n        return;\n      }\n\n      const expirationTime = expirationDate.getTime() - new Date().getTime();\n\n      props.navigation.navigate(\"Shop\");\n      dispatch(authActions.authenticate(userId, token, expirationTime));\n    };\n\n    const expirationTime = (expirationDate) => {};\n\n    tryLogin();\n  }, [dispatch]);\n\n  return (\n    <View style={styles.screen}>\n      <ActivityIndicator size=\"large\" color={Colors.primary} />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n\nexport default StartupScreen;\n"]},"metadata":{},"sourceType":"module"}