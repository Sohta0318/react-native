{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from \"react\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\nimport HeaderButton from \"../../components/UI/HeaderButton\";\nimport OrderItem from \"../../components/shop/OrderItem\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport Colors from \"../../constants/Colors\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar OrdersScreen = function OrdersScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var orders = useSelector(function (state) {\n    return state.orders.orders;\n  });\n  var dispatch = useDispatch();\n  useEffect(function () {\n    setIsLoading(true);\n    dispatch(ordersActions.fetchOrders()).then(function () {\n      setIsLoading(false);\n    });\n  }, [dispatch]);\n\n  if (isLoading) {\n    return _jsx(View, {\n      style: styles.centered,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: Colors.primary\n      })\n    });\n  }\n\n  if (orders.length === 0) {\n    return _jsx(View, {\n      style: {\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: _jsx(Text, {\n        children: \"No orders found, maybe start ordering some products?\"\n      })\n    });\n  }\n\n  return _jsx(FlatList, {\n    data: orders,\n    renderItem: function renderItem(itemData) {\n      return _jsx(OrderItem, {\n        amount: itemData.item.totalAmount,\n        date: itemData.item.readableDate,\n        items: itemData.item.items\n      });\n    }\n  });\n};\n\nOrdersScreen.navigationOptions = function (navData) {\n  return {\n    headerTitle: \"Your Orders\",\n    headerLeft: function headerLeft() {\n      return _jsx(HeaderButtons, {\n        HeaderButtonComponent: HeaderButton,\n        children: _jsx(Item, {\n          title: \"Menu\",\n          iconName: Platform.OS === \"android\" ? \"md-menu\" : \"ios-menu\",\n          onPress: function onPress() {\n            navData.navigation.toggleDrawer();\n          }\n        })\n      });\n    }\n  };\n};\n\nvar styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n});\nexport default OrdersScreen;","map":{"version":3,"sources":["/Users/user/React-Native/sec 11 Authentication/screens/shop/OrdersScreen.js"],"names":["React","useEffect","useState","useDispatch","useSelector","HeaderButtons","Item","HeaderButton","OrderItem","ordersActions","Colors","OrdersScreen","props","isLoading","setIsLoading","orders","state","dispatch","fetchOrders","then","styles","centered","primary","length","flex","justifyContent","alignItems","itemData","item","totalAmount","readableDate","items","navigationOptions","navData","headerTitle","headerLeft","Platform","OS","navigation","toggleDrawer","StyleSheet","create"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;;;;;AASA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,EAAwBC,IAAxB,QAAoC,iCAApC;AACA,OAAOC,YAAP;AACA,OAAOC,SAAP;AACA,OAAO,KAAKC,aAAZ;AACA,OAAOC,MAAP;;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAW;AAC9B,kBAAkCV,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,MAAM,GAAGX,WAAW,CAAC,UAACY,KAAD;AAAA,WAAWA,KAAK,CAACD,MAAN,CAAaA,MAAxB;AAAA,GAAD,CAA1B;AACA,MAAME,QAAQ,GAAGd,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAG,IAAAA,QAAQ,CAACR,aAAa,CAACS,WAAd,EAAD,CAAR,CAAsCC,IAAtC,CAA2C,YAAM;AAC/CL,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,KAFD;AAGD,GALQ,EAKN,CAACG,QAAD,CALM,CAAT;;AAOA,MAAIJ,SAAJ,EAAe;AACb,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAEO,MAAM,CAACC,QAApB;AAAA,gBACE,KAAC,iBAAD;AAAmB,QAAA,IAAI,EAAC,OAAxB;AAAgC,QAAA,KAAK,EAAEX,MAAM,CAACY;AAA9C;AADF,MADF;AAKD;;AACD,MAAIP,MAAM,CAACQ,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WACE,KAAC,IAAD;AAAM,MAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,CAAR;AAAWC,QAAAA,cAAc,EAAE,QAA3B;AAAqCC,QAAAA,UAAU,EAAE;AAAjD,OAAb;AAAA,gBACE,KAAC,IAAD;AAAA;AAAA;AADF,MADF;AAKD;;AACD,SACE,KAAC,QAAD;AACE,IAAA,IAAI,EAAEX,MADR;AAEE,IAAA,UAAU,EAAE,oBAACY,QAAD;AAAA,aACV,KAAC,SAAD;AACE,QAAA,MAAM,EAAEA,QAAQ,CAACC,IAAT,CAAcC,WADxB;AAEE,QAAA,IAAI,EAAEF,QAAQ,CAACC,IAAT,CAAcE,YAFtB;AAGE,QAAA,KAAK,EAAEH,QAAQ,CAACC,IAAT,CAAcG;AAHvB,QADU;AAAA;AAFd,IADF;AAYD,CAtCD;;AAwCApB,YAAY,CAACqB,iBAAb,GAAiC,UAACC,OAAD,EAAa;AAC5C,SAAO;AACLC,IAAAA,WAAW,EAAE,aADR;AAELC,IAAAA,UAAU,EAAE;AAAA,aACV,KAAC,aAAD;AAAe,QAAA,qBAAqB,EAAE5B,YAAtC;AAAA,kBACE,KAAC,IAAD;AACE,UAAA,KAAK,EAAC,MADR;AAEE,UAAA,QAAQ,EAAE6B,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4B,SAA5B,GAAwC,UAFpD;AAGE,UAAA,OAAO,EAAE,mBAAM;AACbJ,YAAAA,OAAO,CAACK,UAAR,CAAmBC,YAAnB;AACD;AALH;AADF,QADU;AAAA;AAFP,GAAP;AAcD,CAfD;;AAiBA,IAAMnB,MAAM,GAAGoB,UAAU,CAACC,MAAX,CAAkB;AAC/BpB,EAAAA,QAAQ,EAAE;AACRG,IAAAA,IAAI,EAAE,CADE;AAERC,IAAAA,cAAc,EAAE,QAFR;AAGRC,IAAAA,UAAU,EAAE;AAHJ;AADqB,CAAlB,CAAf;AAQA,eAAef,YAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport {\n  FlatList,\n  StyleSheet,\n  Platform,\n  ActivityIndicator,\n  View,\n  Text,\n} from \"react-native\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { HeaderButtons, Item } from \"react-navigation-header-buttons\";\nimport HeaderButton from \"../../components/UI/HeaderButton\";\nimport OrderItem from \"../../components/shop/OrderItem\";\nimport * as ordersActions from \"../../store/actions/orders\";\nimport Colors from \"../../constants/Colors\";\n\nconst OrdersScreen = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const orders = useSelector((state) => state.orders.orders);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsLoading(true);\n    dispatch(ordersActions.fetchOrders()).then(() => {\n      setIsLoading(false);\n    });\n  }, [dispatch]);\n\n  if (isLoading) {\n    return (\n      <View style={styles.centered}>\n        <ActivityIndicator size=\"large\" color={Colors.primary} />\n      </View>\n    );\n  }\n  if (orders.length === 0) {\n    return (\n      <View style={{ flex: 1, justifyContent: \"center\", alignItems: \"center\" }}>\n        <Text>No orders found, maybe start ordering some products?</Text>\n      </View>\n    );\n  }\n  return (\n    <FlatList\n      data={orders}\n      renderItem={(itemData) => (\n        <OrderItem\n          amount={itemData.item.totalAmount}\n          date={itemData.item.readableDate}\n          items={itemData.item.items}\n        />\n      )}\n    />\n  );\n};\n\nOrdersScreen.navigationOptions = (navData) => {\n  return {\n    headerTitle: \"Your Orders\",\n    headerLeft: () => (\n      <HeaderButtons HeaderButtonComponent={HeaderButton}>\n        <Item\n          title=\"Menu\"\n          iconName={Platform.OS === \"android\" ? \"md-menu\" : \"ios-menu\"}\n          onPress={() => {\n            navData.navigation.toggleDrawer();\n          }}\n        />\n      </HeaderButtons>\n    ),\n  };\n};\n\nconst styles = StyleSheet.create({\n  centered: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n});\n\nexport default OrdersScreen;\n"]},"metadata":{},"sourceType":"module"}