{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport React, { useReducer, useCallback, useState, useEffect } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { useDispatch } from \"react-redux\";\nimport Input from \"../../components/UI/Input\";\nimport Card from \"../../components/UI/Card\";\nimport Colors from \"../../constants/Colors\";\nimport * as authActions from \"../../store/actions/auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar FORM_INPUT_UPDATE = \"FORM_INPUT_UPDATE\";\n\nvar formReducer = function formReducer(state, action) {\n  if (action.type === FORM_INPUT_UPDATE) {\n    var updatedValues = _objectSpread(_objectSpread({}, state.inputValues), {}, _defineProperty({}, action.input, action.value));\n\n    var updatedValidities = _objectSpread(_objectSpread({}, state.inputValidities), {}, _defineProperty({}, action.input, action.isValid));\n\n    var updatedFormIsValid = true;\n\n    for (var key in updatedValidities) {\n      updatedFormIsValid = updatedFormIsValid && updatedValidities[key];\n    }\n\n    return {\n      formIsValid: updatedFormIsValid,\n      inputValidities: updatedValidities,\n      inputValues: updatedValues\n    };\n  }\n\n  return state;\n};\n\nvar AuthScreen = function AuthScreen(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      error = _useState4[0],\n      setError = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isSignup = _useState6[0],\n      setSignup = _useState6[1];\n\n  var dispatch = useDispatch();\n\n  var _useReducer = useReducer(formReducer, {\n    inputValues: {\n      email: \"\",\n      password: \"\"\n    },\n    inputValidities: {\n      email: false,\n      password: false\n    },\n    formIsValid: false\n  }),\n      _useReducer2 = _slicedToArray(_useReducer, 2),\n      formState = _useReducer2[0],\n      dispatchFormState = _useReducer2[1];\n\n  useEffect(function () {\n    if (error) {\n      Alert.alert(\"An Error Ocurred!\", error, [{\n        text: \"Okay\"\n      }]);\n    }\n  }, [error]);\n\n  var authHandler = function authHandler() {\n    var action;\n    return _regeneratorRuntime.async(function authHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (isSignup) {\n              action = authActions.signup(formState.inputValues.email, formState.inputValues.password);\n            } else {\n              action = authActions.login(formState.inputValues.email, formState.inputValues.password);\n            }\n\n            setError(null);\n            setIsLoading(true);\n            _context.prev = 3;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(dispatch(action));\n\n          case 6:\n            props.navigation.navigate(\"Shop\");\n            _context.next = 13;\n            break;\n\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](3);\n            setError(_context.t0.message);\n            setIsLoading(false);\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[3, 9]], Promise);\n  };\n\n  var inputChangeHandler = useCallback(function (inputIdentifier, inputValue, inputValidity) {\n    dispatchFormState({\n      type: FORM_INPUT_UPDATE,\n      value: inputValue,\n      isValid: inputValidity,\n      input: inputIdentifier\n    });\n  }, [dispatchFormState]);\n  return _jsx(KeyboardAvoidingView, {\n    behavior: \"padding\",\n    keyboardVerticalOffset: 50,\n    style: styles.screen,\n    children: _jsx(LinearGradient, {\n      colors: [\"#ffedff\", \"#ffe3ff\"],\n      style: styles.gradient,\n      children: _jsx(Card, {\n        style: styles.authContainer,\n        children: _jsxs(ScrollView, {\n          children: [_jsx(Input, {\n            id: \"email\",\n            label: \"E-Mail\",\n            keyboardType: \"email-address\",\n            required: true,\n            email: true,\n            autoCapitalize: \"none\",\n            errorText: \"Please enter a valid email address.\",\n            onInputChange: inputChangeHandler,\n            initialValue: \"\"\n          }), _jsx(Input, {\n            id: \"password\",\n            label: \"Password\",\n            keyboardType: \"default\",\n            secureTextEntry: true,\n            required: true,\n            minLength: 5,\n            autoCapitalize: \"none\",\n            errorText: \"Please enter a valid password.\",\n            onInputChange: inputChangeHandler,\n            initialValue: \"\"\n          }), _jsx(View, {\n            style: styles.buttonContainer,\n            children: isLoading ? _jsx(ActivityIndicator, {\n              size: \"small\",\n              color: Colors.primary\n            }) : _jsx(Button, {\n              title: isSignup ? \"Sign Up\" : \"Login\",\n              color: Colors.primary,\n              onPress: authHandler\n            })\n          }), _jsx(View, {\n            style: styles.buttonContainer,\n            children: _jsx(Button, {\n              title: \"Switch to \" + (isSignup ? \"Login\" : \"Sign Up\"),\n              color: Colors.accent,\n              onPress: function onPress() {\n                setSignup(function (prevState) {\n                  return !prevState;\n                });\n              }\n            })\n          })]\n        })\n      })\n    })\n  });\n};\n\nAuthScreen.navigationOptions = {\n  headerTitle: \"Authenticate\"\n};\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1\n  },\n  gradient: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  authContainer: {\n    width: \"80%\",\n    maxWidth: 400,\n    maxHeight: 400,\n    padding: 20\n  },\n  buttonContainer: {\n    marginTop: 10\n  }\n});\nexport default AuthScreen;","map":{"version":3,"sources":["/Users/user/React-Native/sec 11 Authentication/screens/user/AuthScreen.js"],"names":["React","useReducer","useCallback","useState","useEffect","LinearGradient","useDispatch","Input","Card","Colors","authActions","FORM_INPUT_UPDATE","formReducer","state","action","type","updatedValues","inputValues","input","value","updatedValidities","inputValidities","isValid","updatedFormIsValid","key","formIsValid","AuthScreen","props","isLoading","setIsLoading","error","setError","isSignup","setSignup","dispatch","email","password","formState","dispatchFormState","Alert","alert","text","authHandler","signup","login","navigation","navigate","message","inputChangeHandler","inputIdentifier","inputValue","inputValidity","styles","screen","gradient","authContainer","buttonContainer","primary","accent","prevState","navigationOptions","headerTitle","StyleSheet","create","flex","justifyContent","alignItems","width","maxWidth","maxHeight","padding","marginTop"],"mappings":"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","sourcesContent":["import React, { useReducer, useCallback, useState, useEffect } from \"react\";\nimport {\n  ScrollView,\n  View,\n  KeyboardAvoidingView,\n  StyleSheet,\n  Button,\n  ActivityIndicator,\n  Alert,\n} from \"react-native\";\nimport { LinearGradient } from \"expo-linear-gradient\";\nimport { useDispatch } from \"react-redux\";\n\nimport Input from \"../../components/UI/Input\";\nimport Card from \"../../components/UI/Card\";\nimport Colors from \"../../constants/Colors\";\nimport * as authActions from \"../../store/actions/auth\";\n\nconst FORM_INPUT_UPDATE = \"FORM_INPUT_UPDATE\";\n\nconst formReducer = (state, action) => {\n  if (action.type === FORM_INPUT_UPDATE) {\n    const updatedValues = {\n      ...state.inputValues,\n      [action.input]: action.value,\n    };\n    const updatedValidities = {\n      ...state.inputValidities,\n      [action.input]: action.isValid,\n    };\n    let updatedFormIsValid = true;\n    for (const key in updatedValidities) {\n      updatedFormIsValid = updatedFormIsValid && updatedValidities[key];\n    }\n    return {\n      formIsValid: updatedFormIsValid,\n      inputValidities: updatedValidities,\n      inputValues: updatedValues,\n    };\n  }\n  return state;\n};\n\nconst AuthScreen = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState();\n  const [isSignup, setSignup] = useState(false);\n  const dispatch = useDispatch();\n\n  const [formState, dispatchFormState] = useReducer(formReducer, {\n    inputValues: {\n      email: \"\",\n      password: \"\",\n    },\n    inputValidities: {\n      email: false,\n      password: false,\n    },\n    formIsValid: false,\n  });\n\n  useEffect(() => {\n    if (error) {\n      Alert.alert(\"An Error Ocurred!\", error, [{ text: \"Okay\" }]);\n    }\n  }, [error]);\n\n  const authHandler = async () => {\n    let action;\n    if (isSignup) {\n      action = authActions.signup(\n        formState.inputValues.email,\n        formState.inputValues.password\n      );\n    } else {\n      action = authActions.login(\n        formState.inputValues.email,\n        formState.inputValues.password\n      );\n    }\n    setError(null);\n    setIsLoading(true);\n    try {\n      await dispatch(action);\n      props.navigation.navigate(\"Shop\");\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  };\n\n  const inputChangeHandler = useCallback(\n    (inputIdentifier, inputValue, inputValidity) => {\n      dispatchFormState({\n        type: FORM_INPUT_UPDATE,\n        value: inputValue,\n        isValid: inputValidity,\n        input: inputIdentifier,\n      });\n    },\n    [dispatchFormState]\n  );\n\n  return (\n    <KeyboardAvoidingView\n      behavior=\"padding\"\n      keyboardVerticalOffset={50}\n      style={styles.screen}\n    >\n      <LinearGradient colors={[\"#ffedff\", \"#ffe3ff\"]} style={styles.gradient}>\n        <Card style={styles.authContainer}>\n          <ScrollView>\n            <Input\n              id=\"email\"\n              label=\"E-Mail\"\n              keyboardType=\"email-address\"\n              required\n              email\n              autoCapitalize=\"none\"\n              errorText=\"Please enter a valid email address.\"\n              onInputChange={inputChangeHandler}\n              initialValue=\"\"\n            />\n            <Input\n              id=\"password\"\n              label=\"Password\"\n              keyboardType=\"default\"\n              secureTextEntry\n              required\n              minLength={5}\n              autoCapitalize=\"none\"\n              errorText=\"Please enter a valid password.\"\n              onInputChange={inputChangeHandler}\n              initialValue=\"\"\n            />\n            <View style={styles.buttonContainer}>\n              {isLoading ? (\n                <ActivityIndicator size=\"small\" color={Colors.primary} />\n              ) : (\n                <Button\n                  title={isSignup ? \"Sign Up\" : \"Login\"}\n                  color={Colors.primary}\n                  onPress={authHandler}\n                />\n              )}\n            </View>\n            <View style={styles.buttonContainer}>\n              <Button\n                title={`Switch to ${isSignup ? \"Login\" : \"Sign Up\"}`}\n                color={Colors.accent}\n                onPress={() => {\n                  setSignup((prevState) => !prevState);\n                }}\n              />\n            </View>\n          </ScrollView>\n        </Card>\n      </LinearGradient>\n    </KeyboardAvoidingView>\n  );\n};\n\nAuthScreen.navigationOptions = {\n  headerTitle: \"Authenticate\",\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n  },\n  gradient: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  authContainer: {\n    width: \"80%\",\n    maxWidth: 400,\n    maxHeight: 400,\n    padding: 20,\n  },\n  buttonContainer: {\n    marginTop: 10,\n  },\n});\n\nexport default AuthScreen;\n"]},"metadata":{},"sourceType":"module"}