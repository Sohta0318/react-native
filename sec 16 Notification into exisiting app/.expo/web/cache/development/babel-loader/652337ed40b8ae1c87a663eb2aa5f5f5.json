{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"OverflowIcon\", \"accessibilityLabel\", \"testID\", \"onPress\", \"left\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport { extractOverflowButtonData, overflowMenuPressHandlerDropdownMenu, defaultOnOverflowMenuPress } from \"../overflowMenuPressHandlers\";\nimport { OVERFLOW_TOP, OverflowMenuContext } from \"./OverflowMenuContext\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HeaderButton } from \"../HeaderButton\";\nimport { OVERFLOW_BUTTON_TEST_ID } from \"../e2e\";\nimport { ButtonsWrapper } from \"../ButtonsWrapper\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var OverflowMenu = function OverflowMenu(_ref) {\n  var children = _ref.children,\n      style = _ref.style,\n      _ref$OverflowIcon = _ref.OverflowIcon,\n      OverflowIcon = _ref$OverflowIcon === void 0 ? _jsx(View, {}) : _ref$OverflowIcon,\n      _ref$accessibilityLab = _ref.accessibilityLabel,\n      accessibilityLabel = _ref$accessibilityLab === void 0 ? 'More options' : _ref$accessibilityLab,\n      _ref$testID = _ref.testID,\n      testID = _ref$testID === void 0 ? OVERFLOW_BUTTON_TEST_ID : _ref$testID,\n      _ref$onPress = _ref.onPress,\n      onPress = _ref$onPress === void 0 ? defaultOnOverflowMenuPress : _ref$onPress,\n      _ref$left = _ref.left,\n      left = _ref$left === void 0 ? false : _ref$left,\n      other = _objectWithoutProperties(_ref, _excluded);\n\n  var toggleMenu = React.useContext(OverflowMenuContext);\n  var btnRef = React.useRef(null);\n  var renderButtonElement = React.useCallback(function (_ref2) {\n    var color = _ref2.color;\n    return React.isValidElement(OverflowIcon) ? OverflowIcon : _jsx(OverflowIcon, {\n      color: color\n    });\n  }, [OverflowIcon]);\n  var usedOnPress = React.useCallback(function () {\n    var titlesAndOnPresses = onPress === overflowMenuPressHandlerDropdownMenu ? [] : extractOverflowButtonData(children);\n    onPress({\n      children: children,\n      hiddenButtons: titlesAndOnPresses,\n      overflowButtonRef: btnRef.current,\n      _private_toggleMenu: toggleMenu\n    });\n  }, [children, onPress, toggleMenu]);\n  var validChildren = React.Children.toArray(children).filter(React.isValidElement);\n\n  if (validChildren.length === 0) {\n    return null;\n  }\n\n  return _jsxs(ButtonsWrapper, {\n    left: left,\n    children: [_jsx(View, {\n      ref: btnRef,\n      collapsable: false,\n      style: styles.overflowMenuView\n    }), _jsx(HeaderButton, _objectSpread({\n      title: \"overflow menu\",\n      renderButtonElement: renderButtonElement,\n      style: [styles.icon, style],\n      onPress: usedOnPress,\n      accessibilityLabel: accessibilityLabel,\n      testID: testID\n    }, other))]\n  });\n};\nvar styles = StyleSheet.create({\n  icon: _objectSpread({}, Platform.select({\n    android: {\n      marginRight: 9,\n      marginLeft: 7\n    }\n  })),\n  overflowMenuView: {\n    position: 'absolute',\n    top: -OVERFLOW_TOP,\n    right: 0,\n    backgroundColor: 'transparent',\n    width: 1,\n    height: 1\n  }\n});","map":{"version":3,"sources":["/Users/user/React-Native/sec 11 Authentication/node_modules/react-navigation-header-buttons/src/overflowMenu/OverflowMenu.js"],"names":["React","extractOverflowButtonData","overflowMenuPressHandlerDropdownMenu","defaultOnOverflowMenuPress","OVERFLOW_TOP","OverflowMenuContext","HeaderButton","OVERFLOW_BUTTON_TEST_ID","ButtonsWrapper","OverflowMenu","children","style","OverflowIcon","accessibilityLabel","testID","onPress","left","other","toggleMenu","useContext","btnRef","useRef","renderButtonElement","useCallback","color","isValidElement","usedOnPress","titlesAndOnPresses","hiddenButtons","overflowButtonRef","current","_private_toggleMenu","validChildren","Children","toArray","filter","length","styles","overflowMenuView","icon","StyleSheet","create","Platform","select","android","marginRight","marginLeft","position","top","right","backgroundColor","width","height"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport {\n  extractOverflowButtonData,\n  overflowMenuPressHandlerDropdownMenu,\n  defaultOnOverflowMenuPress,\n  type OnOverflowMenuPressParams,\n} from '../overflowMenuPressHandlers';\nimport { OVERFLOW_TOP, OverflowMenuContext } from './OverflowMenuContext';\nimport { View, StyleSheet, Platform } from 'react-native';\nimport { HeaderButton } from '../HeaderButton';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport { OVERFLOW_BUTTON_TEST_ID } from '../e2e';\nimport { ButtonsWrapper } from '../ButtonsWrapper';\n\nexport type OverflowMenuProps = {\n  children: React.Node,\n  OverflowIcon: React.Element<any> | React.ComponentType<any>,\n  style?: ViewStyleProp,\n  testID?: string,\n  accessibilityLabel?: string,\n  onPress: (OnOverflowMenuPressParams) => any,\n  left?: boolean,\n  ...\n};\n\nexport const OverflowMenu = ({\n  children,\n  style,\n  OverflowIcon = <View />,\n  accessibilityLabel = 'More options',\n  testID = OVERFLOW_BUTTON_TEST_ID,\n  onPress = defaultOnOverflowMenuPress,\n  left = false, // this is needed only when OverflowMenu is rendered without HeaderButtons,\n  ...other\n}: OverflowMenuProps): React.Node => {\n  const toggleMenu = React.useContext(OverflowMenuContext);\n  const btnRef = React.useRef<typeof View | null>(null);\n  const renderButtonElement = React.useCallback(\n    ({ color }) => {\n      // $FlowIssue\n      return React.isValidElement(OverflowIcon) ? OverflowIcon : <OverflowIcon color={color} />;\n    },\n    [OverflowIcon]\n  );\n\n  const usedOnPress = React.useCallback(() => {\n    const titlesAndOnPresses =\n      onPress === overflowMenuPressHandlerDropdownMenu ? [] : extractOverflowButtonData(children);\n    onPress({\n      children,\n      hiddenButtons: titlesAndOnPresses,\n      overflowButtonRef: btnRef.current,\n      _private_toggleMenu: toggleMenu,\n    });\n  }, [children, onPress, toggleMenu]);\n\n  const validChildren = React.Children.toArray(children).filter(React.isValidElement);\n  if (validChildren.length === 0) {\n    return null;\n  }\n\n  return (\n    <ButtonsWrapper left={left}>\n      <View ref={btnRef} collapsable={false} style={styles.overflowMenuView} />\n      {/* $FlowFixMeProps yeaah, this is boring :/ */}\n      <HeaderButton\n        title=\"overflow menu\"\n        renderButtonElement={renderButtonElement}\n        style={[styles.icon, style]}\n        onPress={usedOnPress}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n        {...other}\n      />\n    </ButtonsWrapper>\n  );\n};\n\nconst styles = StyleSheet.create({\n  icon: {\n    ...Platform.select({\n      android: {\n        marginRight: 9,\n        marginLeft: 7,\n      },\n    }),\n  },\n  overflowMenuView: {\n    // these are really just needed bcs of the native android popup menu\n    position: 'absolute',\n    top: -OVERFLOW_TOP,\n    // TODO android actually has a little gap on the right of the menu\n    right: 0,\n    backgroundColor: 'transparent',\n    width: 1,\n    height: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}