{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport Card from \"../components/Card\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport BodyText from \"../components/BodyText\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar renderListItem = function renderListItem(listLength, itemData) {\n  return _jsxs(View, {\n    style: styles.listItem,\n    children: [_jsxs(BodyText, {\n      children: [\"#\", listLength - itemData.index]\n    }), _jsx(BodyText, {\n      children: itemData.item\n    })]\n  });\n};\n\nvar GameScreen = function GameScreen(props) {\n  var initialGuess = generateRandomBetween(1, 100, props.userChoice);\n\n  var _useState = useState(initialGuess),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState([initialGuess.toString()]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pastGuesses = _useState4[0],\n      setPastGuesses = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(pastGuesses.length);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [{\n        text: \"Sorry!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess + 1;\n    }\n\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setPastGuesses(function (curPastGuesses) {\n      return [nextNumber.toString()].concat(_toConsumableArray(curPastGuesses));\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Text, {\n      style: DefaultStyles.title,\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      style: styles.buttonContainer,\n      children: [_jsx(MainButton, {\n        onPress: nextGuessHandler.bind(_this, \"lower\"),\n        children: _jsx(Ionicons, {\n          name: \"md-remove\",\n          size: 24,\n          color: \"white\"\n        })\n      }), _jsx(MainButton, {\n        onPress: nextGuessHandler.bind(_this, \"greater\"),\n        children: _jsx(Ionicons, {\n          name: \"md-add\",\n          size: 24,\n          color: \"white\"\n        })\n      })]\n    }), _jsx(View, {\n      style: styles.listContainer,\n      children: _jsx(FlatList, {\n        keyExtractor: function keyExtractor(item) {\n          return item;\n        },\n        data: pastGuesses,\n        renderItem: renderListItem.bind(_this, pastGuesses.length),\n        contentContainerStyle: styles.list\n      })\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\"\n  },\n  listContainer: {\n    width: \"60%\",\n    flex: 1\n  },\n  list: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\"\n  },\n  listItem: {\n    borderColor: \"#ccc\",\n    borderWidth: 1,\n    padding: 15,\n    marginVertical: 10,\n    backgroundColor: \"white\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\"\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["/Users/user/sec4/screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","Ionicons","NumberContainer","Card","DefaultStyles","MainButton","BodyText","generateRandomBetween","min","max","exclude","Math","ceil","floor","rndNum","random","renderListItem","listLength","itemData","styles","listItem","index","item","GameScreen","props","initialGuess","userChoice","currentGuess","setCurrentGuess","toString","pastGuesses","setPastGuesses","currentLow","currentHigh","onGameOver","length","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","curPastGuesses","screen","title","buttonContainer","bind","listContainer","list","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth","flexGrow","borderColor","borderWidth","marginVertical","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  View,\n  Text,\n  StyleSheet,\n  Alert,\n  ScrollView,\n  FlatList,\n} from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nimport NumberContainer from \"../components/NumberContainer\";\nimport Card from \"../components/Card\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport BodyText from \"../components/BodyText\";\n\nconst generateRandomBetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\n// const renderListItem = (value, numOfRound) => {\n//   return (\n//     <View key={value} style={styles.listItem}>\n//       <BodyText>#{numOfRound}</BodyText>\n//       <BodyText>{value}</BodyText>\n//     </View>\n//   );\n// };\nconst renderListItem = (listLength, itemData) => {\n  return (\n    <View style={styles.listItem}>\n      <BodyText>#{listLength - itemData.index}</BodyText>\n      <BodyText>{itemData.item}</BodyText>\n    </View>\n  );\n};\n\nconst GameScreen = (props) => {\n  const initialGuess = generateRandomBetween(1, 100, props.userChoice);\n  const [currentGuess, setCurrentGuess] = useState(initialGuess);\n  // const [pastGuesses, setPastGuesses] = useState([initialGuess]); for scrollView\n  const [pastGuesses, setPastGuesses] = useState([initialGuess.toString()]);\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n\n  const { userChoice, onGameOver } = props;\n\n  useEffect(() => {\n    if (currentGuess === userChoice) {\n      onGameOver(pastGuesses.length);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  const nextGuessHandler = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [\n        { text: \"Sorry!\", style: \"cancel\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess + 1;\n    }\n    const nextNumber = generateRandomBetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextNumber);\n    // setRounds((curRounds) => curRounds + 1);\n    // setPastGuesses((curPastGuesses) => [nextNumber, ...curPastGuesses]); fro ScrollView\n    setPastGuesses((curPastGuesses) => [\n      nextNumber.toString(),\n      ...curPastGuesses,\n    ]);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text style={DefaultStyles.title}>Opponent's Guess</Text>\n      <NumberContainer>{currentGuess}</NumberContainer>\n      <Card style={styles.buttonContainer}>\n        <MainButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n          <Ionicons name=\"md-remove\" size={24} color=\"white\" />\n        </MainButton>\n        <MainButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n          <Ionicons name=\"md-add\" size={24} color=\"white\" />\n        </MainButton>\n      </Card>\n      <View style={styles.listContainer}>\n        {/* <ScrollView contentContainerStyle={styles.list}>\n          {pastGuesses.map((guess, index) => {\n            return renderListItem(guess, pastGuesses.length - index);\n          })}\n        </ScrollView> */}\n        <FlatList\n          keyExtractor={(item) => item}\n          data={pastGuesses}\n          renderItem={renderListItem.bind(this, pastGuesses.length)}\n          contentContainerStyle={styles.list}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\",\n  },\n  listContainer: {\n    width: \"60%\",\n    flex: 1,\n  },\n  list: {\n    flexGrow: 1,\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n  },\n  listItem: {\n    borderColor: \"#ccc\",\n    borderWidth: 1,\n    padding: 15,\n    marginVertical: 10,\n    backgroundColor: \"white\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    width: \"100%\",\n  },\n});\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}