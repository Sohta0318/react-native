{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this;\n\nimport React, { useState, useRef, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport NumberContainer from \"../components/NumberContainer\";\nimport Card from \"../components/Card\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar generateRandomBetween = function generateRandomBetween(min, max, exclude) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  var rndNum = Math.floor(Math.random() * (max - min)) + min;\n\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nvar GameScreen = function GameScreen(props) {\n  var _useState = useState(generateRandomBetween(1, 100, props.userChoice)),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentGuess = _useState2[0],\n      setCurrentGuess = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      pastGuesses = _useState4[0],\n      setPastGuesses = _useState4[1];\n\n  var currentLow = useRef(1);\n  var currentHigh = useRef(100);\n  var userChoice = props.userChoice,\n      onGameOver = props.onGameOver;\n  useEffect(function () {\n    if (currentGuess === userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  var nextGuessHandler = function nextGuessHandler(direction) {\n    if (direction === \"lower\" && currentGuess < props.userChoice || direction === \"greater\" && currentGuess > props.userChoice) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [{\n        text: \"Sorry!\",\n        style: \"cancel\"\n      }]);\n      return;\n    }\n\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n\n    var nextNumber = generateRandomBetween(currentLow.current, currentHigh.current, currentGuess);\n    setCurrentGuess(nextNumber);\n    setPastGuesses(function (curPastGuesses) {\n      return [nextNumber].concat(_toConsumableArray(curPastGuesses));\n    });\n  };\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Text, {\n      style: DefaultStyles.title,\n      children: \"Opponent's Guess\"\n    }), _jsx(NumberContainer, {\n      children: currentGuess\n    }), _jsxs(Card, {\n      style: styles.buttonContainer,\n      children: [_jsx(MainButton, {\n        onPress: nextGuessHandler.bind(_this, \"lower\"),\n        children: _jsx(Ionicons, {\n          name: \"md-remove\",\n          size: 24,\n          color: \"white\"\n        })\n      }), _jsx(MainButton, {\n        onPress: nextGuessHandler.bind(_this, \"greater\"),\n        children: _jsx(Ionicons, {\n          name: \"md-add\",\n          size: 24,\n          color: \"white\"\n        })\n      })]\n    })]\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\"\n  }\n});\nexport default GameScreen;","map":{"version":3,"sources":["/Users/user/sec4/screens/GameScreen.js"],"names":["React","useState","useRef","useEffect","Ionicons","NumberContainer","Card","DefaultStyles","MainButton","generateRandomBetween","min","max","exclude","Math","ceil","floor","rndNum","random","GameScreen","props","userChoice","currentGuess","setCurrentGuess","pastGuesses","setPastGuesses","currentLow","currentHigh","onGameOver","rounds","nextGuessHandler","direction","Alert","alert","text","style","current","nextNumber","curPastGuesses","styles","screen","title","buttonContainer","bind","StyleSheet","create","flex","padding","alignItems","flexDirection","justifyContent","marginTop","width","maxWidth"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport { View, Text, StyleSheet, Button, Alert } from \"react-native\";\nimport { Ionicons } from \"@expo/vector-icons\";\n\nimport NumberContainer from \"../components/NumberContainer\";\nimport Card from \"../components/Card\";\nimport DefaultStyles from \"../constants/default-styles\";\nimport MainButton from \"../components/MainButton\";\n\nconst generateRandomBetween = (min, max, exclude) => {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  const rndNum = Math.floor(Math.random() * (max - min)) + min;\n  if (rndNum === exclude) {\n    return generateRandomBetween(min, max, exclude);\n  } else {\n    return rndNum;\n  }\n};\n\nconst GameScreen = (props) => {\n  const [currentGuess, setCurrentGuess] = useState(\n    generateRandomBetween(1, 100, props.userChoice)\n  );\n  const [pastGuesses, setPastGuesses] = useState([]);\n  const currentLow = useRef(1);\n  const currentHigh = useRef(100);\n\n  const { userChoice, onGameOver } = props;\n\n  useEffect(() => {\n    if (currentGuess === userChoice) {\n      onGameOver(rounds);\n    }\n  }, [currentGuess, userChoice, onGameOver]);\n\n  const nextGuessHandler = (direction) => {\n    if (\n      (direction === \"lower\" && currentGuess < props.userChoice) ||\n      (direction === \"greater\" && currentGuess > props.userChoice)\n    ) {\n      Alert.alert(\"Don't lie!\", \"You know that this is wrong...\", [\n        { text: \"Sorry!\", style: \"cancel\" },\n      ]);\n      return;\n    }\n    if (direction === \"lower\") {\n      currentHigh.current = currentGuess;\n    } else {\n      currentLow.current = currentGuess;\n    }\n    const nextNumber = generateRandomBetween(\n      currentLow.current,\n      currentHigh.current,\n      currentGuess\n    );\n    setCurrentGuess(nextNumber);\n    // setRounds((curRounds) => curRounds + 1);\n    setPastGuesses((curPastGuesses) => [nextNumber, ...curPastGuesses]);\n  };\n\n  return (\n    <View style={styles.screen}>\n      <Text style={DefaultStyles.title}>Opponent's Guess</Text>\n      <NumberContainer>{currentGuess}</NumberContainer>\n      <Card style={styles.buttonContainer}>\n        <MainButton onPress={nextGuessHandler.bind(this, \"lower\")}>\n          <Ionicons name=\"md-remove\" size={24} color=\"white\" />\n        </MainButton>\n        <MainButton onPress={nextGuessHandler.bind(this, \"greater\")}>\n          <Ionicons name=\"md-add\" size={24} color=\"white\" />\n        </MainButton>\n      </Card>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    marginTop: 20,\n    width: 400,\n    maxWidth: \"90%\",\n  },\n});\n\nexport default GameScreen;\n"]},"metadata":{},"sourceType":"module"}