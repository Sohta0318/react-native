{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport AppLoading from \"expo-app-loading\";\nimport Header from \"./components/Header\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar fetchFonts = function fetchFonts() {\n  AppLoading.loadAsync({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      userNumber = _useState2[0],\n      setUserNumber = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      guessRounds = _useState4[0],\n      setGuessRounds = _useState4[1];\n\n  var configureNewGameHandler = function configureNewGameHandler() {\n    setGuessRounds(0);\n    setUserNumber(null);\n  };\n\n  var startGameHandler = function startGameHandler(selectedNumber) {\n    setUserNumber(selectedNumber);\n  };\n\n  var gameOverHandler = function gameOverHandler(numOfRounds) {\n    setGuessRounds(numOfRounds);\n  };\n\n  var content = _jsx(StartGameScreen, {\n    onStartGame: startGameHandler\n  });\n\n  if (userNumber && guessRounds <= 0) {\n    content = _jsx(GameScreen, {\n      userChoice: userNumber,\n      onGameOver: gameOverHandler\n    });\n  } else if (guessRounds > 0) {\n    content = _jsx(GameOverScreen, {\n      roundsNumber: guessRounds,\n      userNumber: userNumber,\n      onRestart: configureNewGameHandler\n    });\n  }\n\n  return _jsxs(View, {\n    style: styles.screen,\n    children: [_jsx(Header, {\n      title: \"Guess a Number\"\n    }), content]\n  });\n}\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["/Users/user/sec4/App.js"],"names":["React","useState","AppLoading","Header","StartGameScreen","GameScreen","GameOverScreen","fetchFonts","loadAsync","require","App","userNumber","setUserNumber","guessRounds","setGuessRounds","configureNewGameHandler","startGameHandler","selectedNumber","gameOverHandler","numOfRounds","content","styles","screen","StyleSheet","create","flex"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,OAAOC,UAAP,MAAuB,kBAAvB;AAEA,OAAOC,MAAP;AACA,OAAOC,eAAP;AACA,OAAOC,UAAP;AACA,OAAOC,cAAP;;;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvBL,EAAAA,UAAU,CAACM,SAAX,CAAqB;AACnB,iBAAaC,OAAO,oCADD;AAEnB,iBAAaA,OAAO;AAFD,GAArB;AAID,CALD;;AAOA,eAAe,SAASC,GAAT,GAAe;AAC5B,kBAAoCT,QAAQ,EAA5C;AAAA;AAAA,MAAOU,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAsCX,QAAQ,CAAC,CAAD,CAA9C;AAAA;AAAA,MAAOY,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACpCD,IAAAA,cAAc,CAAC,CAAD,CAAd;AACAF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACD,GAHD;;AAKA,MAAMI,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,cAAD,EAAoB;AAC3CL,IAAAA,aAAa,CAACK,cAAD,CAAb;AACD,GAFD;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACvCL,IAAAA,cAAc,CAACK,WAAD,CAAd;AACD,GAFD;;AAIA,MAAIC,OAAO,GAAG,KAAC,eAAD;AAAiB,IAAA,WAAW,EAAEJ;AAA9B,IAAd;;AAEA,MAAIL,UAAU,IAAIE,WAAW,IAAI,CAAjC,EAAoC;AAClCO,IAAAA,OAAO,GACL,KAAC,UAAD;AAAY,MAAA,UAAU,EAAET,UAAxB;AAAoC,MAAA,UAAU,EAAEO;AAAhD,MADF;AAGD,GAJD,MAIO,IAAIL,WAAW,GAAG,CAAlB,EAAqB;AAC1BO,IAAAA,OAAO,GACL,KAAC,cAAD;AACE,MAAA,YAAY,EAAEP,WADhB;AAEE,MAAA,UAAU,EAAEF,UAFd;AAGE,MAAA,SAAS,EAAEI;AAHb,MADF;AAOD;;AAED,SACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC,MAApB;AAAA,eACE,KAAC,MAAD;AAAQ,MAAA,KAAK,EAAC;AAAd,MADF,EAEGF,OAFH;AAAA,IADF;AAMD;AAED,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,MAAM,EAAE;AACNG,IAAAA,IAAI,EAAE;AADA;AADuB,CAAlB,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { StyleSheet, View } from \"react-native\";\nimport AppLoading from \"expo-app-loading\";\n\nimport Header from \"./components/Header\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\n\nconst fetchFonts = () => {\n  AppLoading.loadAsync({\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n    \"open-sans\": require(\"./assets/fonts/OpenSans-Bold.ttf\"),\n  });\n};\n\nexport default function App() {\n  const [userNumber, setUserNumber] = useState();\n  const [guessRounds, setGuessRounds] = useState(0);\n\n  const configureNewGameHandler = () => {\n    setGuessRounds(0);\n    setUserNumber(null);\n  };\n\n  const startGameHandler = (selectedNumber) => {\n    setUserNumber(selectedNumber);\n  };\n\n  const gameOverHandler = (numOfRounds) => {\n    setGuessRounds(numOfRounds);\n  };\n\n  let content = <StartGameScreen onStartGame={startGameHandler} />;\n\n  if (userNumber && guessRounds <= 0) {\n    content = (\n      <GameScreen userChoice={userNumber} onGameOver={gameOverHandler} />\n    );\n  } else if (guessRounds > 0) {\n    content = (\n      <GameOverScreen\n        roundsNumber={guessRounds}\n        userNumber={userNumber}\n        onRestart={configureNewGameHandler}\n      />\n    );\n  }\n\n  return (\n    <View style={styles.screen}>\n      <Header title=\"Guess a Number\" />\n      {content}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}