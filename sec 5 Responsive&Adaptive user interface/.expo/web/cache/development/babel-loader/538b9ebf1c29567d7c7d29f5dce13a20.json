{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar StartGameScreen = function StartGameScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      enteredValue = _useState2[0],\n      setEnteredValue = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      confirmed = _useState4[0],\n      setConfirmed = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedNumber = _useState6[0],\n      setSelectedNumber = _useState6[1];\n\n  var numberInputHandler = function numberInputHandler(inputText) {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  var resetInputHandler = function resetInputHandler() {\n    setEnteredValue(\"\");\n    setConfirmed(false);\n  };\n\n  var confirmInputHandler = function confirmInputHandler() {\n    var chosenNumber = parseInt(enteredValue);\n\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\"Invalid Number\", \"Number has to be a number between 1 and 99.\", [{\n        text: \"Okay\",\n        style: \"destructive\",\n        onPress: resetInputHandler\n      }]);\n      return;\n    }\n\n    setConfirmed(true);\n    setEnteredValue(\"\");\n    setSelectedNumber(chosenNumber);\n  };\n\n  var confirmedOutput;\n\n  if (confirmed) {\n    confirmedOutput = _jsx(Card, {\n      children: _jsxs(Text, {\n        children: [\"Chosen Number: \", selectedNumber]\n      })\n    });\n  }\n\n  return _jsx(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      Keyboard.dismiss();\n    },\n    children: _jsxs(View, {\n      style: styles.screen,\n      children: [_jsx(Text, {\n        style: styles.title,\n        children: \"Start a New Game!\"\n      }), _jsxs(Card, {\n        style: styles.inputContainer,\n        children: [_jsx(Text, {\n          children: \"Select a Number\"\n        }), _jsx(Input, {\n          style: styles.input,\n          blurOnSubmit: true,\n          autoCapitalize: \"none\",\n          autoCorrect: false,\n          keyboardType: \"number-pad\",\n          maxLength: 2,\n          onChangeText: numberInputHandler,\n          value: enteredValue\n        }), _jsxs(View, {\n          style: styles.buttonContainer,\n          children: [_jsx(View, {\n            style: styles.button,\n            children: _jsx(Button, {\n              title: \"Reset\",\n              onPress: resetInputHandler,\n              color: Colors.accent\n            })\n          }), _jsx(View, {\n            style: styles.button,\n            children: _jsx(Button, {\n              title: \"Confirm\",\n              onPress: confirmInputHandler,\n              color: Colors.primary\n            })\n          })]\n        })]\n      }), confirmedOutput]\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\"\n  },\n  title: {\n    fontSize: 20,\n    marginVertical: 10\n  },\n  inputContainer: {\n    width: 300,\n    maxWidth: \"80%\",\n    alignItems: \"center\"\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 15\n  },\n  button: {\n    width: 100\n  },\n  input: {\n    width: 50,\n    textAlign: \"center\"\n  },\n  summaryContainer: {}\n});\nexport default StartGameScreen;","map":{"version":3,"sources":["/Users/user/sec4/screens/StartGameScreen.js"],"names":["React","useState","Card","Colors","Input","StartGameScreen","props","enteredValue","setEnteredValue","confirmed","setConfirmed","selectedNumber","setSelectedNumber","numberInputHandler","inputText","replace","resetInputHandler","confirmInputHandler","chosenNumber","parseInt","isNaN","Alert","alert","text","style","onPress","confirmedOutput","Keyboard","dismiss","styles","screen","title","inputContainer","input","buttonContainer","button","accent","primary","StyleSheet","create","flex","padding","alignItems","fontSize","marginVertical","width","maxWidth","flexDirection","justifyContent","paddingHorizontal","textAlign","summaryContainer"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;;;;;;AAUA,OAAOC,IAAP;AACA,OAAOC,MAAP;AACA,OAAOC,KAAP;;;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAAW;AACjC,kBAAwCL,QAAQ,CAAC,EAAD,CAAhD;AAAA;AAAA,MAAOM,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAAkCP,QAAQ,CAAC,KAAD,CAA1C;AAAA;AAAA,MAAOQ,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAA4CT,QAAQ,EAApD;AAAA;AAAA,MAAOU,cAAP;AAAA,MAAuBC,iBAAvB;;AAEA,MAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,SAAD,EAAe;AACxCN,IAAAA,eAAe,CAACM,SAAS,CAACC,OAAV,CAAkB,SAAlB,EAA6B,EAA7B,CAAD,CAAf;AACD,GAFD;;AAIA,MAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC9BR,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAHD;;AAKA,MAAMO,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAChC,QAAMC,YAAY,GAAGC,QAAQ,CAACZ,YAAD,CAA7B;;AACA,QAAIa,KAAK,CAACF,YAAD,CAAL,IAAuBA,YAAY,IAAI,CAAvC,IAA4CA,YAAY,GAAG,EAA/D,EAAmE;AACjEG,MAAAA,KAAK,CAACC,KAAN,CACE,gBADF,EAEE,6CAFF,EAGE,CAAC;AAAEC,QAAAA,IAAI,EAAE,MAAR;AAAgBC,QAAAA,KAAK,EAAE,aAAvB;AAAsCC,QAAAA,OAAO,EAAET;AAA/C,OAAD,CAHF;AAKA;AACD;;AACDN,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAF,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAI,IAAAA,iBAAiB,CAACM,YAAD,CAAjB;AACD,GAbD;;AAcA,MAAIQ,eAAJ;;AACA,MAAIjB,SAAJ,EAAe;AACbiB,IAAAA,eAAe,GACb,KAAC,IAAD;AAAA,gBACE,MAAC,IAAD;AAAA,sCAAsBf,cAAtB;AAAA;AADF,MADF;AAKD;;AACD,SACE,KAAC,wBAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACbgB,MAAAA,QAAQ,CAACC,OAAT;AACD,KAHH;AAAA,cAKE,MAAC,IAAD;AAAM,MAAA,KAAK,EAAEC,MAAM,CAACC,MAApB;AAAA,iBACE,KAAC,IAAD;AAAM,QAAA,KAAK,EAAED,MAAM,CAACE,KAApB;AAAA;AAAA,QADF,EAEE,MAAC,IAAD;AAAM,QAAA,KAAK,EAAEF,MAAM,CAACG,cAApB;AAAA,mBACE,KAAC,IAAD;AAAA;AAAA,UADF,EAEE,KAAC,KAAD;AACE,UAAA,KAAK,EAAEH,MAAM,CAACI,KADhB;AAEE,UAAA,YAAY,MAFd;AAGE,UAAA,cAAc,EAAC,MAHjB;AAIE,UAAA,WAAW,EAAE,KAJf;AAKE,UAAA,YAAY,EAAC,YALf;AAME,UAAA,SAAS,EAAE,CANb;AAOE,UAAA,YAAY,EAAEpB,kBAPhB;AAQE,UAAA,KAAK,EAAEN;AART,UAFF,EAYE,MAAC,IAAD;AAAM,UAAA,KAAK,EAAEsB,MAAM,CAACK,eAApB;AAAA,qBACE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEL,MAAM,CAACM,MAApB;AAAA,sBACE,KAAC,MAAD;AACE,cAAA,KAAK,EAAC,OADR;AAEE,cAAA,OAAO,EAAEnB,iBAFX;AAGE,cAAA,KAAK,EAAEb,MAAM,CAACiC;AAHhB;AADF,YADF,EAQE,KAAC,IAAD;AAAM,YAAA,KAAK,EAAEP,MAAM,CAACM,MAApB;AAAA,sBACE,KAAC,MAAD;AACE,cAAA,KAAK,EAAC,SADR;AAEE,cAAA,OAAO,EAAElB,mBAFX;AAGE,cAAA,KAAK,EAAEd,MAAM,CAACkC;AAHhB;AADF,YARF;AAAA,UAZF;AAAA,QAFF,EA+BGX,eA/BH;AAAA;AALF,IADF;AAyCD,CA7ED;;AA+EA,IAAMG,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,MAAM,EAAE;AACNU,IAAAA,IAAI,EAAE,CADA;AAENC,IAAAA,OAAO,EAAE,EAFH;AAGNC,IAAAA,UAAU,EAAE;AAHN,GADuB;AAM/BX,EAAAA,KAAK,EAAE;AAAEY,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,cAAc,EAAE;AAAhC,GANwB;AAO/BZ,EAAAA,cAAc,EAAE;AACda,IAAAA,KAAK,EAAE,GADO;AAEdC,IAAAA,QAAQ,EAAE,KAFI;AAGdJ,IAAAA,UAAU,EAAE;AAHE,GAPe;AAY/BR,EAAAA,eAAe,EAAE;AACfa,IAAAA,aAAa,EAAE,KADA;AAEfF,IAAAA,KAAK,EAAE,MAFQ;AAGfG,IAAAA,cAAc,EAAE,eAHD;AAIfC,IAAAA,iBAAiB,EAAE;AAJJ,GAZc;AAkB/Bd,EAAAA,MAAM,EAAE;AACNU,IAAAA,KAAK,EAAE;AADD,GAlBuB;AAqB/BZ,EAAAA,KAAK,EAAE;AACLY,IAAAA,KAAK,EAAE,EADF;AAELK,IAAAA,SAAS,EAAE;AAFN,GArBwB;AAyB/BC,EAAAA,gBAAgB,EAAE;AAzBa,CAAlB,CAAf;AA2BA,eAAe9C,eAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  View,\n  StyleSheet,\n  Text,\n  Button,\n  Keyboard,\n  TouchableWithoutFeedback,\n  Alert,\n} from \"react-native\";\nimport Card from \"../components/Card\";\nimport Colors from \"../constants/colors\";\nimport Input from \"../components/Input\";\n\nconst StartGameScreen = (props) => {\n  const [enteredValue, setEnteredValue] = useState(\"\");\n  const [confirmed, setConfirmed] = useState(false);\n  const [selectedNumber, setSelectedNumber] = useState();\n\n  const numberInputHandler = (inputText) => {\n    setEnteredValue(inputText.replace(/[^0-9]/g, \"\"));\n  };\n\n  const resetInputHandler = () => {\n    setEnteredValue(\"\");\n    setConfirmed(false);\n  };\n\n  const confirmInputHandler = () => {\n    const chosenNumber = parseInt(enteredValue);\n    if (isNaN(chosenNumber) || chosenNumber <= 0 || chosenNumber > 99) {\n      Alert.alert(\n        \"Invalid Number\",\n        \"Number has to be a number between 1 and 99.\",\n        [{ text: \"Okay\", style: \"destructive\", onPress: resetInputHandler }]\n      );\n      return;\n    }\n    setConfirmed(true);\n    setEnteredValue(\"\");\n    setSelectedNumber(chosenNumber);\n  };\n  let confirmedOutput;\n  if (confirmed) {\n    confirmedOutput = (\n      <Card>\n        <Text>Chosen Number: {selectedNumber}</Text>\n      </Card>\n    );\n  }\n  return (\n    <TouchableWithoutFeedback\n      onPress={() => {\n        Keyboard.dismiss();\n      }}\n    >\n      <View style={styles.screen}>\n        <Text style={styles.title}>Start a New Game!</Text>\n        <Card style={styles.inputContainer}>\n          <Text>Select a Number</Text>\n          <Input\n            style={styles.input}\n            blurOnSubmit\n            autoCapitalize=\"none\"\n            autoCorrect={false}\n            keyboardType=\"number-pad\"\n            maxLength={2}\n            onChangeText={numberInputHandler}\n            value={enteredValue}\n          />\n          <View style={styles.buttonContainer}>\n            <View style={styles.button}>\n              <Button\n                title=\"Reset\"\n                onPress={resetInputHandler}\n                color={Colors.accent}\n              />\n            </View>\n            <View style={styles.button}>\n              <Button\n                title=\"Confirm\"\n                onPress={confirmInputHandler}\n                color={Colors.primary}\n              />\n            </View>\n          </View>\n        </Card>\n        {confirmedOutput}\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nconst styles = StyleSheet.create({\n  screen: {\n    flex: 1,\n    padding: 10,\n    alignItems: \"center\",\n  },\n  title: { fontSize: 20, marginVertical: 10 },\n  inputContainer: {\n    width: 300,\n    maxWidth: \"80%\",\n    alignItems: \"center\",\n  },\n  buttonContainer: {\n    flexDirection: \"row\",\n    width: \"100%\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 15,\n  },\n  button: {\n    width: 100,\n  },\n  input: {\n    width: 50,\n    textAlign: \"center\",\n  },\n  summaryContainer: {},\n});\nexport default StartGameScreen;\n"]},"metadata":{},"sourceType":"module"}