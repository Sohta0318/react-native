{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport Order from \"../../models/order\";\nimport { ADD_ORDER } from \"../actions/orders\";\nvar initialState = {\n  orders: []\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_ORDER:\n      var newOrder = new Order(new Data().toString(), action.orderData.items, action.orderData.amount, new Data());\n      return _objectSpread(_objectSpread({}, state), {}, {\n        orders: state.orders.concat(newOrder)\n      });\n  }\n\n  return state;\n});","map":{"version":3,"sources":["/Users/user/React-Native/sec 8 The Shop App/store/reducers/orders.js"],"names":["Order","ADD_ORDER","initialState","orders","state","action","type","newOrder","Data","toString","orderData","items","amount","concat"],"mappings":";;;;;;AAAA,OAAOA,KAAP;AACA,SAASC,SAAT;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,MAAM,EAAE;AADW,CAArB;AAIA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKL,SAAL;AACE,UAAMM,QAAQ,GAAG,IAAIP,KAAJ,CACf,IAAIQ,IAAJ,GAAWC,QAAX,EADe,EAEfJ,MAAM,CAACK,SAAP,CAAiBC,KAFF,EAGfN,MAAM,CAACK,SAAP,CAAiBE,MAHF,EAIf,IAAIJ,IAAJ,EAJe,CAAjB;AAMA,6CAAYJ,KAAZ;AAAmBD,QAAAA,MAAM,EAAEC,KAAK,CAACD,MAAN,CAAaU,MAAb,CAAoBN,QAApB;AAA3B;AARJ;;AAUA,SAAOH,KAAP;AACD,CAZD","sourcesContent":["import Order from \"../../models/order\";\nimport { ADD_ORDER } from \"../actions/orders\";\n\nconst initialState = {\n  orders: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ORDER:\n      const newOrder = new Order(\n        new Data().toString(),\n        action.orderData.items,\n        action.orderData.amount,\n        new Data()\n      );\n      return { ...state, orders: state.orders.concat(newOrder) };\n  }\n  return state;\n};\n"]},"metadata":{},"sourceType":"module"}